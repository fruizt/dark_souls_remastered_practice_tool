// **********************************
// *** AUTOGENERATED, DO NOT EDIT ***
// **********************************
#[derive(Debug)]
pub struct BaseAddresses {
    pub base_a: usize,
    pub world_chr_man: usize,
    pub character_flags: usize,
}

impl BaseAddresses {
    pub fn with_module_base_addr(self, base: usize) -> BaseAddresses {
        BaseAddresses {
            base_a: self.base_a + base,
            world_chr_man: self.world_chr_man + base,
            character_flags: self.character_flags + base,
        }
    }
}

#[derive(Clone, Copy)]
pub enum Version {
    V1_00_0,
}

impl TryFrom<(u32, u32, u32)> for Version {
    type Error = ();

    fn try_from(v: (u32, u32, u32)) -> Result<Self, ()> {
        match v {
            (1, 0, 0) => Ok(Version::V1_00_0),
            (maj, min, patch) => {
                log::error!("Unrecognized version {maj}.{min:02}.{patch}");
                Err(())
            }
        }
    }
}

impl From<Version> for (u32, u32, u32) {
    fn from(v: Version) -> Self {
        match v {
            Version::V1_00_0 => (1, 0, 0),
        }
    }
}

impl From<Version> for BaseAddresses {
    fn from(v: Version) -> Self {
        match v {
            Version::V1_00_0 => BASE_ADDRESSES_1_00_0,
        }
    }
}

pub const BASE_ADDRESSES_1_00_0: BaseAddresses = BaseAddresses {
    base_a: 0x1a31768,
    world_chr_man: 0x1c8a530,
    character_flags: 0x1c77e50,
};

